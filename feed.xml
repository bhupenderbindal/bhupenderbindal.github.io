<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.4">Jekyll</generator><link href="https://bhupenderbindal.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bhupenderbindal.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2024-09-21T18:32:37+00:00</updated><id>https://bhupenderbindal.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">My first Advent of code problem</title><link href="https://bhupenderbindal.github.io/blog/2024/first-aoc-problem/" rel="alternate" type="text/html" title="My first Advent of code problem" /><published>2024-02-10T00:00:00+00:00</published><updated>2024-02-10T00:00:00+00:00</updated><id>https://bhupenderbindal.github.io/blog/2024/first-aoc-problem</id><content type="html" xml:base="https://bhupenderbindal.github.io/blog/2024/first-aoc-problem/"><![CDATA[<p>This post is about my first take at Advent of Code in the winter of 2023. I came to know about this through some people talking about it. So I thought to give it a try. I started with the “<a href="https://adventofcode.com/2023/day/13">Day 13: Point of incidence</a>” problem as coincidentally 13th, which is considered an unlucky number.</p>

<h2 data-toc-text="Problem definition" id="problem-definition">Problem definition</h2>

<p>The AOC develops the whole set of problems in a story-based fashion which is great. However, as I was starting late in the story, I didn’t understand much of it but still the individual problem can be understood owing to a nice explanation with the example, which is better than great, i.e., wonderful. Have a look at the <a href="https://adventofcode.com/2023/day/13">problem page</a>.</p>

<p>I will keep it simple here with the problem definition. The problem gives us an input in the form of a pattern consisting of “#” and “.” and we need to return a positive integer as the result after solving.</p>

<p>The example patterns are as below:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.

#...##..#
#....#..#
..##..###
#####.##.
#####.##.
..##..###
#....#..#
</code></pre></div></div>
<p>The LOR for both the patterns are shown below:</p>

<ol>
  <li>Here the line of refelection is between columns 5 and 6. Column one is not involved in the reflection as 9 is an odd number of columns, here column 1 is the extra and ignored.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>123456789
    &gt;&lt;   
#.##..##.
..#.##.#.
##......#
##......#
..#.##.#.
..##..##.
#.#.##.#.
    &gt;&lt;
123456789
</code></pre></div>    </div>
  </li>
  <li>Here the LOR is between rows 4 and 5. Here row 1 is not involved in the reflection.
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>1 #...##..# 1
2 #....#..# 2
3 ..##..### 3
4v#####.##.v4
5^#####.##.^5
6 ..##..### 6
7 #....#..# 7
</code></pre></div>    </div>
    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>RESULT = (Total number of columns to the left of each vertical LOR) 
      + 100 * (Total number of rows above horizontal LOR)
</code></pre></div>    </div>
    <p>Result for the example = 5 + 100 * (4) = 405</p>
  </li>
</ol>

<p>Now the actual problem input is more than 1000 lines consisting of many such individual patterns and we need to calculate the output for this long input.</p>

<h2 id="my-first-solution">My first solution</h2>

<p>I noted that if a logic works horizontal patterns to find the LOR, then the same logic can be used on the transposed version of the patterns which will work as if it finds the vertical LOR.</p>

<p>Now to use this logic I needed two versions of the input, one as it is and the other containing the transposed version of the patterns. Only the summation formula will be different for the two versions and the result will be the sum of the two summations.</p>

<p>As I need a transposed version of each pattern, I need a simple transpose operation which is available in numpy arrays. The numpy array supports different data types of the array elements. So I can directly create the array of the characters and avoid converting the input pattern into an array of 0s and 1s.</p>

<p>After this logic setup, comes the execution. 
First, we want to read the file and create the two versions of the input.
For that, we define a function as below:</p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code>
<span class="k">def</span> <span class="nf">create_patterns_arr</span><span class="p">():</span>
    <span class="n">hor_patterns</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="n">ver_patterns</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="k">with</span> <span class="nf">open</span><span class="p">(</span><span class="sh">"</span><span class="s">./input.txt</span><span class="sh">"</span><span class="p">,</span> <span class="n">mode</span><span class="o">=</span><span class="sh">"</span><span class="s">r</span><span class="sh">"</span><span class="p">)</span> <span class="k">as</span> <span class="n">f</span><span class="p">:</span>
        <span class="c1"># a is an temp array for each pattern
</span>        <span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
        <span class="k">for</span> <span class="n">line</span> <span class="ow">in</span> <span class="n">f</span><span class="p">.</span><span class="nf">readlines</span><span class="p">():</span>
            <span class="k">if</span> <span class="n">line</span> <span class="o">==</span> <span class="sh">"</span><span class="se">\n</span><span class="sh">"</span><span class="p">:</span>
                <span class="n">hor_patterns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
                <span class="n">ver_patterns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">a</span><span class="p">)))</span>
                <span class="n">a</span> <span class="o">=</span> <span class="p">[]</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">a</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="nf">list</span><span class="p">(</span><span class="n">line</span><span class="p">[:</span><span class="o">-</span><span class="mi">1</span><span class="p">]))</span>

        <span class="n">hor_patterns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">a</span><span class="p">))</span>
        <span class="n">ver_patterns</span><span class="p">.</span><span class="nf">append</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">transpose</span><span class="p">(</span><span class="n">np</span><span class="p">.</span><span class="nf">array</span><span class="p">(</span><span class="n">a</span><span class="p">)))</span>
    <span class="k">return</span> <span class="n">hor_patterns</span><span class="p">,</span> <span class="n">ver_patterns</span>
</code></pre></div></div>

<p>Now we have a list of patterns (as a numpy array), we want to find the LOR. First I thought about checking whether a pattern has odd or even lines and then trying to find the LOR. However, as per the example, a row(s) can have no reflection depending on where the LOR occurs.</p>

<p>Hence it’s better to iterate over all the rows and find the possible LOR where a row and its next row are equal. Then check whether this line occurs before the middle of the pattern or after the middle of the pattern based on which we will consider only the reflected rows and reject the extra rows from the top or the bottom. Now we check whether two equal parts up and below the LOR are equal and if yes then add the amount as per the formula otherwise move to the next row.</p>

<p>First the simpler part of checking whether the two parts obtained are equal or not. Here, I simply wrote a function using numpy API.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">are_nparr_mirror</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
    <span class="n">b</span> <span class="o">=</span> <span class="n">b</span><span class="p">[::</span><span class="o">-</span><span class="mi">1</span><span class="p">]</span>
    <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_equal</span><span class="p">(</span><span class="n">a</span><span class="p">,</span> <span class="n">b</span><span class="p">):</span>
        <span class="k">return</span> <span class="bp">True</span>
    <span class="k">else</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">False</span>
</code></pre></div></div>

<p>Then write the code for finding LOR in the horizontal LOR:</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="n">hor_patterns</span><span class="p">,</span> <span class="n">ver_patterns</span> <span class="o">=</span> <span class="nf">create_patterns_arr</span><span class="p">()</span>
<span class="n">res</span> <span class="o">=</span> <span class="mi">0</span>

<span class="k">for</span> <span class="n">pattern</span> <span class="ow">in</span> <span class="n">hor_patterns</span><span class="p">:</span>

    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_equal</span><span class="p">(</span><span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">pattern</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">):</span>
                <span class="n">common_len</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span>

                <span class="k">if</span> <span class="nf">are_nparr_mirror</span><span class="p">(</span>
                    <span class="n">pattern</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">common_len</span> <span class="p">:</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">pattern</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:]</span>
                <span class="p">):</span>
                    <span class="n">res</span> <span class="o">+=</span> <span class="mi">100</span> <span class="o">*</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">common_len</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="nf">are_nparr_mirror</span><span class="p">(</span>
                    <span class="n">pattern</span><span class="p">[:</span><span class="n">common_len</span><span class="p">],</span> <span class="n">pattern</span><span class="p">[</span><span class="n">common_len</span> <span class="p">:</span> <span class="n">common_len</span> <span class="o">*</span> <span class="mi">2</span><span class="p">]</span>
                <span class="p">):</span>
                    <span class="n">res</span> <span class="o">+=</span> <span class="mi">100</span> <span class="o">*</span> <span class="p">(</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span>
</code></pre></div></div>

<p>I checked this on the example pattern with horizontal LOR and iterated until I got the slicing logic correct. And then the same logic just with a changed summation formula for the vertical patterns as I already have the transposed version of them.</p>
<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">for</span> <span class="n">pattern</span> <span class="ow">in</span> <span class="n">ver_patterns</span><span class="p">:</span>
    <span class="k">for</span> <span class="n">i</span> <span class="ow">in</span> <span class="nf">range</span><span class="p">(</span><span class="n">pattern</span><span class="p">.</span><span class="n">shape</span><span class="p">[</span><span class="mi">0</span><span class="p">]</span> <span class="o">-</span> <span class="mi">1</span><span class="p">):</span>
        <span class="k">if</span> <span class="n">np</span><span class="p">.</span><span class="nf">array_equal</span><span class="p">(</span><span class="n">pattern</span><span class="p">[</span><span class="n">i</span><span class="p">],</span> <span class="n">pattern</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">]):</span>
            <span class="k">if</span> <span class="n">i</span> <span class="o">&gt;=</span> <span class="nf">int</span><span class="p">(</span><span class="nf">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span> <span class="o">/</span> <span class="mi">2</span><span class="p">):</span>
                <span class="n">common_len</span> <span class="o">=</span> <span class="nf">len</span><span class="p">(</span><span class="n">pattern</span><span class="p">)</span> <span class="o">-</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">i</span>

                <span class="k">if</span> <span class="nf">are_nparr_mirror</span><span class="p">(</span>
                    <span class="n">pattern</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="o">-</span> <span class="n">common_len</span> <span class="p">:</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span><span class="p">],</span> <span class="n">pattern</span><span class="p">[</span><span class="n">i</span> <span class="o">+</span> <span class="mi">1</span> <span class="p">:]</span>
                <span class="p">):</span>
                    <span class="n">res</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
            <span class="k">else</span><span class="p">:</span>
                <span class="n">common_len</span> <span class="o">=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>

                <span class="k">if</span> <span class="nf">are_nparr_mirror</span><span class="p">(</span>
                    <span class="n">pattern</span><span class="p">[:</span><span class="n">common_len</span><span class="p">],</span> <span class="n">pattern</span><span class="p">[</span><span class="n">common_len</span> <span class="p">:</span> <span class="n">common_len</span> <span class="o">*</span> <span class="mi">2</span><span class="p">]</span>
                <span class="p">):</span>
                    <span class="n">res</span> <span class="o">+=</span> <span class="n">i</span> <span class="o">+</span> <span class="mi">1</span>
</code></pre></div></div>

<p>This gives the first solution, not very elegant, but works after 5 hours of fiddling with the problem.</p>

<h2 id="second-part-of-the-problem">Second part of the problem</h2>

<p>While writing this blog, I realized that in December I only solved the first part of the problem. So I thought of solving the second part now, to save my pride.
Solving the second part was not easy either, and trying to solve it the first time looked at other solutions in the Reddit thread of the problem to find “Have I made the problem even more complex than it is ?; There must be another efficient way for the logic”. So I found out that my first logic of transposing and using the same logic for vertical LOR is correct, but could be written without repeating code, duh yeah! The more interesting was the second logic to find the LOR, instead of using a common length or repeated pattern, at every index a simpler minimum function between the index and the remaining length can be used. Moreover, rather than checking the equality of two sides of LOR, a difference between the two sides can be checked to be 0 for the first part and 1 for the second part (numpy has a function for character difference too if I avoid using 0 and 1 encoding), which involves minor change between two parts and is logical as the second should built on top of one.<br />
I could now add my solution for the second part and go over it but more important are the lessons learned.</p>

<h2 id="lessons-learned">Lessons learned</h2>
<ol>
  <li>Thinking over the logic is more important than straight away writing code unless one has with practice decreased that gap sufficiently. This will avoid <strong>many iterations of execution and expecting a correct answer</strong>. Obviously without writing code the correctness of logic cannot be checked but logic deserves at least some mental work before being written in code form.</li>
  <li>Observe the first code and try to simplify the logic and refactor if the code seems too big for the problem.</li>
  <li>Practice more! or in other words “Übung macht den Meister”. Producing an elegant solution takes more practice.</li>
</ol>

<!-- 
## Some mistakes which I did and their solution
  - not setting the server name to "0.0.0.0" for the webapplication and hence could not connect to the host port
  [as discussed on stackoverflow question](https://stackoverflow.com/questions/39525820/docker-port-forwarding-not-working)
  - not creating a workdir in the container which can cause problem if your following command has to do with the files in the directory 
  - using docker cp to copy a local file in container then launching the app. But I missed the obvious pitfall of using the docker cp command that it only make temp change to a container which is still missing from the image and wont work when the image is deployed again locally or on cloud -->]]></content><author><name></name></author><category term="programming" /><category term="logic" /><summary type="html"><![CDATA[experience of solving advent of code problem]]></summary></entry><entry><title type="html">My first Advent of code problem :part2 in C++</title><link href="https://bhupenderbindal.github.io/blog/2024/first-aoc-problem-in-c++/" rel="alternate" type="text/html" title="My first Advent of code problem :part2 in C++" /><published>2024-02-10T00:00:00+00:00</published><updated>2024-02-10T00:00:00+00:00</updated><id>https://bhupenderbindal.github.io/blog/2024/first-aoc-problem-in-c++</id><content type="html" xml:base="https://bhupenderbindal.github.io/blog/2024/first-aoc-problem-in-c++/"><![CDATA[<p><strong>Intended audience: Beginners not masters.</strong></p>

<p>Now, I will try to refactor the code for the problem and try to code the same logic in C++ and improve my understanding of programming concepts with this execercise. Followed by what I learned in this attempt, which might be useful for someone else reading it.</p>

<p><strong>NOTE:</strong> This is no sense an attempt to compare the languages.
 <!-- Followed by the comparison between the two in terms of obviously runtime.  --></p>

<h2 data-toc-text="Python code refactoring" id="python-code-refactoring">Python code refactoring</h2>
<p>Although I had looked at the shortest form of solutions code, I refactored my code myself for two reasons:</p>
<ol>
  <li>It will help me understand what parts and logic of my code were redundant or could be better written in the first place. For example, I found that I can write code with less of my favorite “if statement”, which is also recommended way. Another example is the “return statement” in combination with “if statement” is a point of play. One can add the return statement with the “if condition” and follow it with a return statement without using the “else condition” if no else logic is required and utilize this point of play as per requirement.</li>
  <li>The short solutions are certainly good but my current coding style is more verbose than that. Copying the solution won’t help in improving. I still need to learn with practice to write logic and flow in a more precise way but with good readability for myself and others.</li>
</ol>

<h2 id="solving-in-c">Solving in C++</h2>

<!-- After starting to solve in C++, I got the obvious realization that the same logic cannot be followed as data structures used in python with numpy has a very different API than that of data structures in C++. So I tried to adopt my base logic to C++.  -->

<p>I dont want to repeat what are the differences between python and C++, as there are already many blogs and videos over it some bad, some good. Even I have watched a couple of them, but none of them can give me the feeling/understanding that I get by writing some C++ code myself and experience the most obvious differences, which anyone can understand them by hello-world in both the languages, and the more strong differences that hit you when you move from python to c++ code, reinforcing some programming concepts by experiencing how different languages deal with them. <em>As experienced people say talking about the difference between two languages is unncessary and problem one is trying to solve is more important. Do what is more comfortable to you and more importantly align with the goals of the problem/task one is trying to solve.</em></p>

<p><!-- Or one is trying to appreciate the beauty of how different languages deal and apply the same concepts improving general understanding. --></p>

<p>After all this great talk above, i am still a novice and will try to write “thats interesting” that I can see in short time.
First of all, it was a tough job even to code the same logic in C++ due to the obvious lack of knowledge and practice with C++ containers and generic algorithms related to them.
Hence I used for loops at many places iterating element by element and even transposing a vector of strings. Oh boy, that was entertaining and frustrating at the same time.</p>

<p>I thought of attaching my solution in C++ but right now I avoid you the headache of reading it and in addition to that I am still on the journey of being comfortable sharing my not so good code. Hence moving to more important stuff in the next section.</p>

<h2 id="lessons-learned-thats-interesting">Lessons learned/ That’s interesting</h2>
<p>As I start writing this section, I discovered more important questions that I needed to look into.</p>

<ul>
  <li>why i even use vectors instead of arrays in c++: with list() and numpy array() one can easily create arrays as required. but in c++ one uses vectors if one does not the size of array beforehand</li>
  <li>why create new arrays (in the findlor function) instead of using the slice as in python : is this issue of pass by value(copy with extra space) and pass by refernce for functions –&gt; read the book</li>
  <li>concept of view and shallow copy when passing objects in python</li>
</ul>

<ol>
  <li>As c++ requires type of the object that container holds, I have to write “vector&lt;vector<string>&gt; all_patterns;" which on the first sight looks extra work but in other look it promotes to think before about what are you going to store in the container which in turn promotes "think before you write code". This guide of type allows to think what type of contaianer, what it will be storing and what operations can be performed on it. In python, in my experience I create a list and simply keep on appending to it whatever type is required and later during further operations or in case of debugging I can think over the types etc. Again both have their uses.</string></li>
  <li></li>
</ol>

<!-- 
## Some mistakes which I did and their solution
  - not setting the server name to "0.0.0.0" for the webapplication and hence could not connect to the host port
  [as discussed on stackoverflow question](https://stackoverflow.com/questions/39525820/docker-port-forwarding-not-working)
  - not creating a workdir in the container which can cause problem if your following command has to do with the files in the directory 
  - using docker cp to copy a local file in container then launching the app. But I missed the obvious pitfall of using the docker cp command that it only make temp change to a container which is still missing from the image and wont work when the image is deployed again locally or on cloud -->]]></content><author><name></name></author><category term="programming" /><category term="logic" /><summary type="html"><![CDATA[AOC day 13 in C++ and comparison with python]]></summary></entry><entry><title type="html">Dockerfile, docker image and docker container :what is missed in a beginner tutorial</title><link href="https://bhupenderbindal.github.io/blog/2023/docker-blog/" rel="alternate" type="text/html" title="Dockerfile, docker image and docker container :what is missed in a beginner tutorial" /><published>2023-10-29T14:14:00+00:00</published><updated>2023-10-29T14:14:00+00:00</updated><id>https://bhupenderbindal.github.io/blog/2023/docker-blog</id><content type="html" xml:base="https://bhupenderbindal.github.io/blog/2023/docker-blog/"><![CDATA[<p>This post might be useful to someone who is trying to create docker images or run docker containers and has already gone through some “getting started” docker tutorials and blogs but still cannot get his/her head around it. If you are like me who does not have a computer science degree but finds it interesting, you might enjoy reading. Hence comments are welcomed from beginners as well as experts.</p>

<h2 data-toc-text="Motivation" id="motivation-behind-a-post-about-docker">Motivation behind a post about docker</h2>

<p>After hosting a demo of my app on huggingface using gradio option, I found that huggingface creates a container to run the gradio app. Already there is tons of info about docker containers and their purpose.  This post deals with some problems that a beginner faces and the information that is usually skipped by a beginner. Hence the following text can be considered as extra information that a beginner like me found insightful and made me more confident about writing my own dockerfile, creating images and running the container.</p>

<h2 id="dockerfile-to-a-running-docker-container">Dockerfile to a running docker container</h2>

<p>The first thing for running an application or service is a docker image, which could either be pulled from a verified source or built on top of an existing docker image from a verified source(which is generally the case) by creating a Dockerfile and obtaining an image that does what you would like to do. Once you have the required docker image, then it can run to create a container that can be hosted on your local computer or in the cloud through a cloud service provider platform or <strong>even on huggingface spaces like I did for my first image</strong>.</p>

<div class="col-sm mt-3 mt-md-0">
    <figure>

  <picture>
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/docker.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

</div>

<p>As shown in the above figure, docker offers different commands which are useful in each stage. The above commands list is far from exhaustive but covers most that a newbie requires to build a docker container. The docker documentation provides details of each of the above commands. In the following section, we will explore some of those commands with their specific usage that you might find useful to debug a container that cannot start or to view the logs with any included error messages that one might miss out.</p>

<h2 id="commands-that-are-pretty-useful">Commands that are pretty useful</h2>

<ol>
  <li>You have created a docker image but when you run it, nothing or something wrong
 happens. You need to debug the container.
    <ul>
      <li>For this, it’s good to have an understanding of ENTRYPOINT and CMD  in a docker file. ENTRYPOINT decides which executable in the container should be executed when the container is run (<a href="https://docs.docker.com/engine/reference/run/#entrypoint-default-command-to-execute-at-runtime">read more</a>). The default entrypoint is “/bin/bash -c”. CMD provides the arguments that can be passed to the ENTRYPOINT. <a href="https://www.howtogeek.com/devops/the-difference-between-cmd-and-entrypoint-in-docker-images/">A nice blog gives simple example</a>.
 With the default entrypoint,i.e. when you don’t define any entrypoint, one can execute a run command followed by the command to override the defined CMD. For example, a bash terminal to explore the docker container and to check if everything works inside the container, for example, the below command will run the container with a shell terminal and let you explore the container with a bash shell:</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker run -it --name &lt;container_name&gt; &lt;image_name&gt; sh
</code></pre></div>    </div>
  </li>
  <li>Your container is running but does not work as expected or you want to explore file
  structure or processes inside the container or install or remove inside the container.
    <ul>
      <li>docker exec is a nice option to execute some commands in a running container</li>
    </ul>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> docker exec -it &lt;container name&gt; sh
 docker exec -it &lt;container name&gt; date
 docker exec -it &lt;container name&gt; top
 docker exec -it &lt;container name&gt; bash -c "curl http://127.0.0.1:7680"
</code></pre></div>    </div>
  </li>
  <li>You want to see what output is generated by the processes inside the docker if any.
    <ul>
      <li>logs: to view the logs of the container</li>
      <li>save the logs of image creation to a file to view the steps and explore the errors in image creation</li>
      <li>bash -c option with run command</li>
    </ul>
  </li>
</ol>

<h2 id="some-mistakes-that-i-made-and-their-solution">Some mistakes that I made and their solution</h2>
<ul>
  <li>not setting the server name to “0.0.0.0” for the web application and hence could not connect to the host port
  <a href="https://stackoverflow.com/questions/39525820/docker-port-forwarding-not-working">as discussed on stackoverflow question</a></li>
  <li>not creating a workdir in the container which can cause problem if your following command has to do with the files in the directory</li>
  <li>using docker cp to copy a local file in a container and then launching the app. But I missed the obvious pitfall of using the docker cp command that it only makes a temp change to a container that is still missing from the image and won’t work when the image is deployed again locally or on the cloud</li>
</ul>

<h2 id="multi-stage-docker-images">Multi-stage docker images</h2>
<ul>
  <li>purpose: Some applications that you want to containerize might have a build stage, where the compilation of code occurs to create final artifacts and a run time that only requires the final artifacts for the final application. In such cases, <strong>multi-stage build</strong> can reduce the size of your images which could be a problem for docker image uploading and downloading, especially when it is performed over different hosts.</li>
  <li>example <strong>TODO</strong></li>
</ul>]]></content><author><name></name></author><category term="containerisation" /><summary type="html"><![CDATA[docker for beginner]]></summary></entry></feed>