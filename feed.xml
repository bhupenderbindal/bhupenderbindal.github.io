<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.3.2">Jekyll</generator><link href="https://bhupenderbindal.github.io/feed.xml" rel="self" type="application/atom+xml" /><link href="https://bhupenderbindal.github.io/" rel="alternate" type="text/html" hreflang="en" /><updated>2023-12-10T17:12:31+00:00</updated><id>https://bhupenderbindal.github.io/feed.xml</id><title type="html">blank</title><subtitle>A simple, whitespace theme for academics. Based on [*folio](https://github.com/bogoli/-folio) design.
</subtitle><entry><title type="html">Dockerfile, docker image and docker container :what is missed in a beginner tutorial</title><link href="https://bhupenderbindal.github.io/blog/2023/docker-blog/" rel="alternate" type="text/html" title="Dockerfile, docker image and docker container :what is missed in a beginner tutorial" /><published>2023-10-29T14:14:00+00:00</published><updated>2023-10-29T14:14:00+00:00</updated><id>https://bhupenderbindal.github.io/blog/2023/docker-blog</id><content type="html" xml:base="https://bhupenderbindal.github.io/blog/2023/docker-blog/"><![CDATA[<p>This post might be useful to someone who is trying to create docker images or run docker containers and has already gone through some “getting started” docker tutorials and blogs but still cannot get his/her head around it. If you are like me who does not have computer science degree but find it interesting, you might enoy reading. Hence comments are welcomed from beginners as well as experts.</p>

<p>Contents:</p>
<ol>
  <li>Motivation behind a post about docker</li>
  <li>Dockerfile to a running docker container</li>
  <li>Docker commands that are pretty useful</li>
  <li>Some mistakes which I did and their solution</li>
  <li>Multi-stage docker images</li>
</ol>

<h2 data-toc-text="Motivation" id="motivation-behind-a-post-about-docker">Motivation behind a post about docker</h2>

<p>After hosting a demo of my app on huggingface using gradio option, I found that huggingface creates a container to run the gradio app. Already there is tons of info about docker containers and their purpose.  This post deals with some problems that a beginner face and the information which is usually skipped by a beginner. Hence the following text can be considered as an extra information that a beginner like me found insightful and made more confident about writing own dockerfile, creating images and running the container.</p>

<h2 id="dockerfile-to-a-running-docker-container">Dockerfile to a running docker container</h2>

<p>First thing for running an application or service is an docker image, which could either be pulled from a verified source or built on top of existing docker image from a verified source(which is generally the case) by creating Dockerfile and obtaining an image that does what you would like to do. Once you have the required docker image, then it can run to create a container which can be hosted on your local computer or in cloud through a cloud service provider platform or <strong>even on huggingface spaces like I did for my first image</strong>.</p>

<div class="col-sm mt-3 mt-md-0">
    <figure>

  <picture>
    

    <!-- Fallback to the original file -->
    <img src="/assets/img/docker.png" class="img-fluid rounded z-depth-1" width="auto" height="auto" data-zoomable="" onerror="this.onerror=null; $('.responsive-img-srcset').remove();" />

  </picture>

</figure>

</div>

<p>As shown in the above figure, docker offers different commands which are useful in each stage. The above commands list far from exhaustive but covers most that a newbie requires to build a docker container. The docker documentation provides details of each of the above commands. In the following section, we will explore some of those commands with their specific usage that you might find useful debug a container which cannot start or to view the logs with any included error messages which one might miss out.</p>

<h2 id="commands-that-are-pretty-useful">Commands that are pretty useful</h2>

<ol>
  <li>You have created a docker image but when you run it, nothing or something wrong happens. You need to debug the container.
    <ul>
      <li>For this it’s good to have an understanding of ENTRYPOINT and CMD  in a dockerfile. ENTRYPOINT decides which executable in the container should be executed when the container is run (<a href="https://docs.docker.com/engine/reference/run/#entrypoint-default-command-to-execute-at-runtime">read more</a>). The default entrypoint is “/bin/bash -c”. CMD provides the arguments that can be passed to the ENTRYPOINT. <a href="https://www.howtogeek.com/devops/the-difference-between-cmd-and-entrypoint-in-docker-images/">A nice blog giving simple example</a>.
  With the default entrypoint,i.e. when you don’t define any entrypoint, one can execute a run command followed by command to override the defined CMD. For example, a bash terminal to explore the docker container and to check if everything works inside the container, for example the below command will run the container with a shell terminal and letting you explore the container with a bash shell:</li>
    </ul>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker run -it --name &lt;container_name&gt; &lt;image_name&gt; sh
</code></pre></div></div>

<ol>
  <li>Your container is running but does not work as expected or you want to explore file structure or processes inside the container or install or remove inside the container.
    <ul>
      <li>docker exec is a nice option to execute some command in a running container</li>
    </ul>
  </li>
</ol>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  docker exec -it &lt;container name&gt; sh
  docker exec -it &lt;container name&gt; date
  docker exec -it &lt;container name&gt; top
  docker exec -it &lt;container name&gt; bash -c "curl http://127.0.0.1:7680"
</code></pre></div></div>

<ol>
  <li>You want to see what output is generated by the processes inside the docker if any.
    <ul>
      <li>logs : to view the logs of the container</li>
      <li>save the logs of image creation to a file to view the steps and explore the errors in image creation</li>
      <li>bash -c option with run command</li>
    </ul>
  </li>
</ol>

<h2 id="some-mistakes-which-i-did-and-their-solution">Some mistakes which I did and their solution</h2>
<ul>
  <li>not setting the server name to “0.0.0.0” for the webapplication and hence could not connect to the host port
  <a href="https://stackoverflow.com/questions/39525820/docker-port-forwarding-not-working">as discussed on stackoverflow question</a></li>
  <li>not creating a workdir in the container which can cause problem if your following command has to do with the files in the directory</li>
  <li>using docker cp to copy a local file in container then launching the app. But I missed the obvious pitfall of using the docker cp command that it only make temp change to a container which is still missing from the image and wont work when the image is deployed again locally or on cloud</li>
</ul>

<h2 id="multi-stage-docker-images">Multi-stage docker images</h2>
<ul>
  <li>purpose : Some application that you want to containerise might have a build stage, where the compilation of code occurs to create final artifacts, and a run time which only requires the final artifacts for the final application. In such cases, <strong>multi-stage build</strong> can reduce the size of your images which could be a problem for docker image uploading and downloading, especially when it is performed over different hosts.</li>
  <li>example</li>
</ul>]]></content><author><name></name></author><category term="sample-posts" /><category term="toc" /><category term="sidebar" /><summary type="html"><![CDATA[an example of a blog post with table of contents on a sidebar]]></summary></entry></feed>